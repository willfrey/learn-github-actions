name: Tests

on:
  push:
    branches: [main]

  pull_request:
    branches: [main]

  workflow_dispatch:

jobs:
  tests:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        python-version: [3.8, 3.9]

    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry Action
        # You may pin to the exact commit or the version.
        # uses: snok/install-poetry@fdde2e959030c136a4108a030377df3f06cacc3a
        uses: snok/install-poetry@v1.2.0
        with:
          # The Poetry version to install
          version: latest # default is latest
          # Whether Poetry should create a virtualenv or not
          virtualenvs-create: true # optional, default is true
          # Whether Poetry should create virtualenvs in the project directory or not
          virtualenvs-in-project: false # optional, default is false
          
      - run: poetry config --list
        shell: bash

      - run: poetry config virtualenvs.in-project false
        shell: bash

      - run: poetry config --list
        shell: bash

      - run: poetry install -n
        shell: bash

      # - uses: actions/cache@v2
      #   id: cache
      #   with:
      #     path: ${{ env.VENV }}
      #     key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      # - if: steps.cache.outputs.cache-hit == 'true'
      #   run: echo ${{ steps.cache.outputs.cache-hit }}
      # - if: steps.cache.outputs.cache-hit == 'false'
      #   run: poetry run pip --version
      # - if: steps.cache.outputs.cache-hit == 'true'
      #   run: timeout 10s poetry run pip --version || rm -rf .venv
