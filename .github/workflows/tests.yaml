name: Tests

on:
  push:
    branches: [main]

  pull_request:
    branches: [main]

  workflow_dispatch:

jobs:
  tests:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        python-version: ["3.8", "3.9"]

    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Set up the cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Cache hit is true
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          echo ${{ steps.cache.outputs.cache-hit }}
          poetry run pip --version

      - name: Cache hit is false
        if: steps.cache.outputs.cache-hit == 'false'
        run: |
          echo ${{ steps.cache.outputs.cache-hit }}
          poetry run pip --version

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s poetry run pip --version || rm -rf .venv
